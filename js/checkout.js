
// L·∫•y d·ªØ li·ªáu t·ª´ localStorage
const cart = JSON.parse(localStorage.getItem("cart")) || [];
const orderSummary = JSON.parse(localStorage.getItem("orderSummary")) || null;

// Render danh s√°ch s·∫£n ph·∫©m trong checkout summary l·∫•y t·ª´ m·∫£ng cart
const renderCheckoutItems = () => {
    const container = document.querySelector(".order-summary");
    if (!container) return; //N·∫øu kh√¥ng query ƒë∆∞·ª£c th√¨ return

    // X√≥a c√°c item m·∫´u c·ª©ng trong HTML
    const oldItems = container.querySelectorAll(".summary-item");
    oldItems.forEach(item => item.remove());

    // N·∫øu m·∫£ng cart l·∫•y v·ªÅ r·ªóng th√¨ render ra giao di·ªán r·ªóng
    if (cart.length === 0) {
        container.innerHTML = `<p>Your cart is empty!</p>`;
        return;
    }

    // Render s·∫£n ph·∫©m
    cart.forEach(item => {
        const div = document.createElement("div");
        div.classList.add("summary-item");
        div.innerHTML = `
            <div class="item-image">
                <img src="img/products/${item.image}" alt="${item.name}">
            </div>
            <div class="item-name">${item.name}</div>
            <div class="item-quantity">x${item.quantity}</div>
            <div class="item-price not-important-price">$${item.price * item.quantity}</div>
        `;
        // Ch√®n v√†o tr∆∞·ªõc ph·∫ßn shipping/t·ªïng
        const totalEl = container.querySelector(".summary-shipping");
        container.insertBefore(div, totalEl);
    });
};

// Render t·ªïng k·∫øt ƒë∆°n h√†ng (subtotal, tax, shipping, discount, total)
const renderCheckoutSummary = () => {
    if (!orderSummary) return; // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c orderSummary t·ª´ localstorage th√¨ return

    document.querySelector(".summary-subtotal .subtotal-value").textContent = `$${orderSummary.subtotal}`;
    document.querySelector(".summary-tax .tax-value").textContent = `$${orderSummary.tax}`;
    document.querySelector(".summary-shipping-handling .shipping-handling-value").textContent = `$${orderSummary.shipping}`;
    document.querySelector(".summary-discount .discount-value").textContent = `-$${orderSummary.discount}`;
    document.querySelector(".summary-total .total-value").textContent = `$${orderSummary.total}`;
};

// Th√™m x·ª≠ l√Ω s·ª± ki·ªán v√†o c√°c n√∫t radio ch·ªçn payment method
const AddEventToRadioPayment = () => {
    // L·∫•y t·∫•t c·∫£ c√°c input c√≥ name="paymentMethod"
    const paymentInputs = document.querySelectorAll('input[name="paymentMethod"]');

    // G·∫Øn s·ª± ki·ªán change cho t·ª´ng radio
    paymentInputs.forEach(input => {
        input.addEventListener('change', (e) => {
            const selectedMethod = e.target.value; // l·∫•y gi√° tr·ªã (cod, creditCard, applePay)
            localStorage.setItem('paymentMethod', selectedMethod); // l∆∞u v√†o localStorage
        });
    });

    // (T√πy ch·ªçn) ‚Äî Khi load trang, n·∫øu c√≥ gi√° tr·ªã c≈© trong localStorage th√¨ t·ª± set checked
    const savedMethod = localStorage.getItem('paymentMethod');
    if (savedMethod) {
        const savedInput = document.querySelector(`input[name="paymentMethod"][value="${savedMethod}"]`);
        if (savedInput) savedInput.checked = true;
    }
}

//X·ª≠ l√Ω s·ª± ki·ªán n√∫t checkout
const handleCheckOut = () => {
    // H√†m t·∫°o ƒë∆°n h√†ng sau khi checkout
    const addresses = JSON.parse(localStorage.getItem("checkout_addresses")) || [];
    const paymentMethod = localStorage.getItem("paymentMethod") || "cod"; // l·∫•y ph∆∞∆°ng th·ª©c thanh to√°n t·ª´ localstorage

    // Ki·ªÉm tra n·∫øu cart trong localstorage r·ªóng th√¨ ko cho checkout
    if (cart.length === 0) {
        alert("Cart is empty, cannot checkout!");
        return;
    }

    // L·∫•y ƒë·ªãa ch·ªâ ƒëang ch·ªçn b·∫±ng c√°ch t√¨m ra ph·∫ßn t·ª≠ trong m·∫£ng addresses
    // ƒë√£ ƒë∆∞·ª£c l·∫•y ·ªü tr√™n c√≥ thu·ªôc t√≠nh selected l√† true, n·∫øu ko c√≥ c√°i n√†o selected true th√¨ l·∫•y c√°i ƒë·∫ßu
    const selectedAddress = addresses.find(addr => addr.selected) || addresses[0];

    // T·∫°o order object
    const order = {
        id: "ORD-" + Date.now(),  // ID duy nh·∫•t d·ª±a tr√™n timestamp
        date: new Date().toLocaleString(), // H√†m l·∫•y ra String th·ªùi gian hi·ªán t·∫°i
        items: cart, // cart l·∫•y t·ª´ localstorage
        summary: summary, // summary l·∫•y t·ª´ localstorage
        customer: selectedAddress, // L·∫•y t·ª´ localstorage
        paymentMethod: paymentMethod, // L·∫•y t·ª´ localstorage
        status: "Confirmed" // C·ªë ƒë·ªãnh
    };

    // L·∫•y orderHistory c≈© (orderHistory l√† m·∫£ng g·ªìm c√°c h√≥a ƒë∆°n c≈©) r·ªìi add h√≥a ƒë∆°n m·ªõi nh·∫•t v·ª´a t·∫°o v√†o
    let orderHistory = JSON.parse(localStorage.getItem("orderHistory")) || [];
    orderHistory.push(order);

    // L∆∞u l·∫°i m·∫£ng orderHistory m·ªõi
    localStorage.setItem("orderHistory", JSON.stringify(orderHistory));

    // X√≥a cart sau khi checkout
    localStorage.removeItem("cart");

    alert("Checkout successful! üéâ Order saved."); // th√¥ng b√°o
    window.location.href = "invoice.html"; // Chuy·ªÉn sang trang in h√≥a ƒë∆°n
}


// Kh·ªüi t·∫°o khi load trang
document.addEventListener("DOMContentLoaded", () => {
    renderCheckoutItems();
    renderCheckoutSummary();
    AddEventToRadioPayment();

    //t·ª´ file address.js
    renderAddresses();
    addressInputFunction();
});
